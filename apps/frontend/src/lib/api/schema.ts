/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/projects/{projectId}/openapi/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Chapi.ApiSpecs.Application.ImportOpenApiInputDto"];
                    "text/json": components["schemas"]["Chapi.ApiSpecs.Application.ImportOpenApiInputDto"];
                    "application/*+json": components["schemas"]["Chapi.ApiSpecs.Application.ImportOpenApiInputDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"];
                        "application/json": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"];
                        "text/json": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/openapi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"][];
                        "application/json": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"][];
                        "text/json": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/openapi/{specId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    specId: string;
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"];
                        "application/json": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"];
                        "text/json": components["schemas"]["Chapi.ApiSpecs.Application.ApiSpecDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Register a new user account and send a confirmation email
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User registration data */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Api.Controllers.AuthController.RegisterDto"];
                    "text/json": components["schemas"]["ShipMvp.Api.Controllers.AuthController.RegisterDto"];
                    "application/*+json": components["schemas"]["ShipMvp.Api.Controllers.AuthController.RegisterDto"];
                };
            };
            responses: {
                /** @description Registration successful */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Api.Controllers.AuthController.RegisterResultDto"];
                    };
                };
                /** @description Invalid registration data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Username or email already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/status/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user status
         * @description Get user registration and email confirmation status
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User status retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Api.Controllers.AuthController.UserStatusDto"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/authprofiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    PageSize?: number;
                    Enabled?: boolean;
                    ProjectId?: string;
                    ServiceId?: string;
                    Env?: string;
                    Search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AuthProfiles.Application.Requests.CreateAuthProfileRequest"];
                    "text/json": components["schemas"]["AuthProfiles.Application.Requests.CreateAuthProfileRequest"];
                    "application/*+json": components["schemas"]["AuthProfiles.Application.Requests.CreateAuthProfileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/authprofiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AuthProfiles.Application.Requests.UpdateAuthProfileRequest"];
                    "text/json": components["schemas"]["AuthProfiles.Application.Requests.UpdateAuthProfileRequest"];
                    "application/*+json": components["schemas"]["AuthProfiles.Application.Requests.UpdateAuthProfileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/authprofiles/{id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/authprofiles/{id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/authprofiles/detect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AuthProfiles.Controllers.AuthProfilesController.DetectRequest"];
                    "text/json": components["schemas"]["AuthProfiles.Controllers.AuthProfilesController.DetectRequest"];
                    "application/*+json": components["schemas"]["AuthProfiles.Controllers.AuthProfilesController.DetectRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    projectId?: string;
                    page?: number;
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chat.Application.Dtos.ConversationDto"][];
                        "application/json": components["schemas"]["Chat.Application.Dtos.ConversationDto"][];
                        "text/json": components["schemas"]["Chat.Application.Dtos.ConversationDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Chat.Application.Requests.CreateConversationRequest"];
                    "text/json": components["schemas"]["Chat.Application.Requests.CreateConversationRequest"];
                    "application/*+json": components["schemas"]["Chat.Application.Requests.CreateConversationRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chat.Application.Dtos.ConversationDto"];
                        "application/json": components["schemas"]["Chat.Application.Dtos.ConversationDto"];
                        "text/json": components["schemas"]["Chat.Application.Dtos.ConversationDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chat.Application.Dtos.ConversationDto"];
                        "application/json": components["schemas"]["Chat.Application.Dtos.ConversationDto"];
                        "text/json": components["schemas"]["Chat.Application.Dtos.ConversationDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/append": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Chat.Application.Requests.AppendMessageRequest"];
                    "text/json": components["schemas"]["Chat.Application.Requests.AppendMessageRequest"];
                    "application/*+json": components["schemas"]["Chat.Application.Requests.AppendMessageRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chat.Application.Dtos.MessageDto"];
                        "application/json": components["schemas"]["Chat.Application.Dtos.MessageDto"];
                        "text/json": components["schemas"]["Chat.Application.Dtos.MessageDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/append-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Chat.Application.Requests.AppendMessagesRequest"];
                    "text/json": components["schemas"]["Chat.Application.Requests.AppendMessagesRequest"];
                    "application/*+json": components["schemas"]["Chat.Application.Requests.AppendMessagesRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chat.Application.Dtos.MessageDto"][];
                        "application/json": components["schemas"]["Chat.Application.Dtos.MessageDto"][];
                        "text/json": components["schemas"]["Chat.Application.Dtos.MessageDto"][];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/save-diff-suite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Chat.Application.Requests.SaveDiffAsSuiteRequest"];
                    "text/json": components["schemas"]["Chat.Application.Requests.SaveDiffAsSuiteRequest"];
                    "application/*+json": components["schemas"]["Chat.Application.Requests.SaveDiffAsSuiteRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Contacts.Application.Requests.CreateContactRequest"];
                    "text/json": components["schemas"]["Contacts.Application.Requests.CreateContactRequest"];
                    "application/*+json": components["schemas"]["Contacts.Application.Requests.CreateContactRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Contact/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Contacts.Application.Requests.UpdateContactRequest"];
                    "text/json": components["schemas"]["Contacts.Application.Requests.UpdateContactRequest"];
                    "application/*+json": components["schemas"]["Contacts.Application.Requests.UpdateContactRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Contact/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: {
                    status?: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dashboard data
         * @description Retrieve complete dashboard analytics including summary statistics, top traffic sources, and time series data
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date for data range (optional, defaults to 7 days ago) */
                    startDate?: string;
                    /** @description End date for data range (optional, defaults to today) */
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dashboard data retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Domain.Analytics.Models.DashboardData"];
                    };
                };
                /** @description Invalid date range */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Access denied */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Dashboard/sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top traffic sources
         * @description Retrieve the top traffic sources with visitor counts and sales data
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date for data range (optional, defaults to 7 days ago) */
                    startDate?: string;
                    /** @description End date for data range (optional, defaults to today) */
                    endDate?: string;
                    /** @description Maximum number of sources to return (1-50, defaults to 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Traffic sources retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Domain.Analytics.Models.TrafficSource"][];
                    };
                };
                /** @description Invalid parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Access denied */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Dashboard/timeseries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get time series data
         * @description Retrieve time series data for revenue, profit, page views, and signups charts
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date for data range (optional, defaults to 7 days ago) */
                    startDate?: string;
                    /** @description End date for data range (optional, defaults to today) */
                    endDate?: string;
                    /** @description Data granularity: daily, weekly, or monthly (defaults to daily) */
                    granularity?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Time series data retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Domain.Analytics.Models.TimeSeriesDataPoint"][];
                    };
                };
                /** @description Invalid parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Access denied */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Dashboard/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dashboard summary
         * @description Retrieve summary statistics including page views, revenue, paying users, and signups with percentage changes
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date for data range (optional, defaults to 7 days ago) */
                    startDate?: string;
                    /** @description End date for data range (optional, defaults to today) */
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Summary statistics retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Domain.Analytics.Models.DashboardSummary"];
                    };
                };
                /** @description Invalid date range */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Access denied */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Email/resend-confirmation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resends signup confirmation email to a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Resend confirmation request */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Api.Controllers.ResendConfirmationRequest"];
                    "text/json": components["schemas"]["ShipMvp.Api.Controllers.ResendConfirmationRequest"];
                    "application/*+json": components["schemas"]["ShipMvp.Api.Controllers.ResendConfirmationRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                        "application/json": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                        "text/json": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Email/password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sends password reset email to a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Password reset request */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Api.Controllers.SendPasswordResetRequest"];
                    "text/json": components["schemas"]["ShipMvp.Api.Controllers.SendPasswordResetRequest"];
                    "application/*+json": components["schemas"]["ShipMvp.Api.Controllers.SendPasswordResetRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                        "application/json": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                        "text/json": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Email/welcome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sends welcome email to a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Welcome email request */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Api.Controllers.SendWelcomeEmailRequest"];
                    "text/json": components["schemas"]["ShipMvp.Api.Controllers.SendWelcomeEmailRequest"];
                    "application/*+json": components["schemas"]["ShipMvp.Api.Controllers.SendWelcomeEmailRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                        "application/json": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                        "text/json": components["schemas"]["ShipMvp.Domain.Email.Models.EmailResult"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Email/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets email service health status (Admin only) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Api.Controllers.EmailServiceHealth"];
                        "application/json": components["schemas"]["ShipMvp.Api.Controllers.EmailServiceHealth"];
                        "text/json": components["schemas"]["ShipMvp.Api.Controllers.EmailServiceHealth"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/endpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    tag?: string;
                    q?: string;
                };
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chapi.EndpointCatalog.Application.EndpointBriefDto"][];
                        "application/json": components["schemas"]["Chapi.EndpointCatalog.Application.EndpointBriefDto"][];
                        "text/json": components["schemas"]["Chapi.EndpointCatalog.Application.EndpointBriefDto"][];
                    };
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/endpoints/{endpointId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                    endpointId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chapi.EndpointCatalog.Application.EndpointDto"];
                        "application/json": components["schemas"]["Chapi.EndpointCatalog.Application.EndpointDto"];
                        "text/json": components["schemas"]["Chapi.EndpointCatalog.Application.EndpointDto"];
                    };
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Search?: string;
                    Page?: number;
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"][];
                        "application/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"][];
                        "text/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Environments.Application.Dtos.CreateEnvironmentRequest"];
                    "text/json": components["schemas"]["Environments.Application.Dtos.CreateEnvironmentRequest"];
                    "application/*+json": components["schemas"]["Environments.Application.Dtos.CreateEnvironmentRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "application/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "text/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{projectId}/environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"][];
                        "application/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"][];
                        "text/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Environments.Application.Dtos.CreateEnvironmentRequest"];
                    "text/json": components["schemas"]["Environments.Application.Dtos.CreateEnvironmentRequest"];
                    "application/*+json": components["schemas"]["Environments.Application.Dtos.CreateEnvironmentRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "application/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "text/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/environments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "application/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "text/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Environments.Application.Dtos.UpdateEnvironmentRequest"];
                    "text/json": components["schemas"]["Environments.Application.Dtos.UpdateEnvironmentRequest"];
                    "application/*+json": components["schemas"]["Environments.Application.Dtos.UpdateEnvironmentRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "application/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "text/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/environments/{id}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/environments/{environmentId}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    environmentId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Environments.Application.Dtos.SetSecretRequest"];
                    "text/json": components["schemas"]["Environments.Application.Dtos.SetSecretRequest"];
                    "application/*+json": components["schemas"]["Environments.Application.Dtos.SetSecretRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "application/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "text/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/environments/{environmentId}/secrets/rotate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    environmentId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Environments.Application.Dtos.RotateSecretRequest"];
                    "text/json": components["schemas"]["Environments.Application.Dtos.RotateSecretRequest"];
                    "application/*+json": components["schemas"]["Environments.Application.Dtos.RotateSecretRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "application/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                        "text/json": components["schemas"]["Environments.Application.Dtos.EnvironmentDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a file */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file?: string;
                        IsPublic?: boolean;
                        Tags?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Files.FileUploadResultDto"];
                        "application/json": components["schemas"]["ShipMvp.Application.Files.FileUploadResultDto"];
                        "text/json": components["schemas"]["ShipMvp.Application.Files.FileUploadResultDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files/{fileId}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download a file */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    fileId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get file information */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    fileId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Files.FileDto"];
                        "application/json": components["schemas"]["ShipMvp.Application.Files.FileDto"];
                        "text/json": components["schemas"]["ShipMvp.Application.Files.FileDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a file */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    fileId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get list of files with pagination */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                    userId?: string;
                    containerName?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Files.FileListDto"];
                        "application/json": components["schemas"]["ShipMvp.Application.Files.FileListDto"];
                        "text/json": components["schemas"]["ShipMvp.Application.Files.FileListDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Files/{fileId}/signed-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get signed URL for file access */
        get: {
            parameters: {
                query?: {
                    expirationHours?: number;
                };
                header?: never;
                path: {
                    fileId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Welcome endpoint - redirects to Swagger */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** API info endpoint (alternative to root) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Integrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all integrations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"][];
                        "application/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"][];
                        "text/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /** Create a new integration */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Application.Integrations.CreateIntegrationDto"];
                    "text/json": components["schemas"]["ShipMvp.Application.Integrations.CreateIntegrationDto"];
                    "application/*+json": components["schemas"]["ShipMvp.Application.Integrations.CreateIntegrationDto"];
                };
            };
            responses: {
                /** @description Integration created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                        "application/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                        "text/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Integration with same name already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Integrations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                        "application/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                        "text/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Integration not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update an integration */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Application.Integrations.UpdateIntegrationDto"];
                    "text/json": components["schemas"]["ShipMvp.Application.Integrations.UpdateIntegrationDto"];
                    "application/*+json": components["schemas"]["ShipMvp.Application.Integrations.UpdateIntegrationDto"];
                };
            };
            responses: {
                /** @description Integration updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                        "application/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                        "text/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Integration not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete an integration */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Integration deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Integration not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        /** Check if integration exists */
        head: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Integration exists */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Integration not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        patch?: never;
        trace?: never;
    };
    "/api/Integrations/by-type/{integrationType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integrations by type */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    integrationType: components["schemas"]["ShipMvp.Domain.Integrations.IntegrationType"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"][];
                        "application/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"][];
                        "text/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Integrations/by-name/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get integration by name */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                        "application/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                        "text/json": components["schemas"]["ShipMvp.Application.Integrations.IntegrationDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Integration not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/llm/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Chapi.AI.Dto.ApiTestGenerateRequest"];
                    "text/json": components["schemas"]["Chapi.AI.Dto.ApiTestGenerateRequest"];
                    "application/*+json": components["schemas"]["Chapi.AI.Dto.ApiTestGenerateRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Chapi.AI.Dto.ChapiCard"];
                        "application/json": components["schemas"]["Chapi.AI.Dto.ChapiCard"];
                        "text/json": components["schemas"]["Chapi.AI.Dto.ChapiCard"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Search?: string;
                    Status?: string;
                    Page?: number;
                    PageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Projects.Application.Dtos.ProjectDto"][];
                        "application/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"][];
                        "text/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Projects.Application.Dtos.CreateProjectRequest"];
                    "text/json": components["schemas"]["Projects.Application.Dtos.CreateProjectRequest"];
                    "application/*+json": components["schemas"]["Projects.Application.Dtos.CreateProjectRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "application/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "text/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "application/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "text/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Projects.Application.Dtos.UpdateProjectRequest"];
                    "text/json": components["schemas"]["Projects.Application.Dtos.UpdateProjectRequest"];
                    "application/*+json": components["schemas"]["Projects.Application.Dtos.UpdateProjectRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "application/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "text/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "application/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "text/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "application/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "text/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/hold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "application/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "text/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/projects/{id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "application/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                        "text/json": components["schemas"]["Projects.Application.Dtos.ProjectDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/run-pack/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Chapi.AI.Services.GenerateRunPackRequest"];
                    "text/json": components["schemas"]["Chapi.AI.Services.GenerateRunPackRequest"];
                    "application/*+json": components["schemas"]["Chapi.AI.Services.GenerateRunPackRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/run-pack/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    runPackId?: string;
                    page?: number;
                    pageSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/run-pack/runs/{runPackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    file?: string;
                };
                header?: never;
                path: {
                    runPackId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    runPackId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/run-pack/runs/{runPackId}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    runPackId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Chapi.AI.Controllers.RunPackController.UpdateFileRequest"];
                    "text/json": components["schemas"]["Chapi.AI.Controllers.RunPackController.UpdateFileRequest"];
                    "application/*+json": components["schemas"]["Chapi.AI.Controllers.RunPackController.UpdateFileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runpacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    projectId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RunPack.Application.Requests.BuildRunPackRequest"];
                    "text/json": components["schemas"]["RunPack.Application.Requests.BuildRunPackRequest"];
                    "application/*+json": components["schemas"]["RunPack.Application.Requests.BuildRunPackRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runpacks/conversation/{conversationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    conversationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runpacks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runpacks/from-conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["RunPack.Application.Requests.BuildRunPackFromConversationRequest"];
                    "text/json": components["schemas"]["RunPack.Application.Requests.BuildRunPackFromConversationRequest"];
                    "application/*+json": components["schemas"]["RunPack.Application.Requests.BuildRunPackFromConversationRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    PageSize?: number;
                    SuiteId?: string;
                    Status?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Runs.Application.Dtos.RunDto"][];
                        "application/json": components["schemas"]["Runs.Application.Dtos.RunDto"][];
                        "text/json": components["schemas"]["Runs.Application.Dtos.RunDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Runs.Application.Dtos.QueueRunRequest"];
                    "text/json": components["schemas"]["Runs.Application.Dtos.QueueRunRequest"];
                    "application/*+json": components["schemas"]["Runs.Application.Dtos.QueueRunRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "application/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "text/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    PageSize?: number;
                    SuiteId?: string;
                    Status?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": number;
                        "application/json": number;
                        "text/json": number;
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "application/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "text/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs/{id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "application/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "text/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs/{id}/succeed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "application/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "text/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs/{id}/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "application/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "text/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "application/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "text/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/runs/{id}/steps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Runs.Application.Dtos.AddRunStepRequest"];
                    "text/json": components["schemas"]["Runs.Application.Dtos.AddRunStepRequest"];
                    "application/*+json": components["schemas"]["Runs.Application.Dtos.AddRunStepRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "application/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                        "text/json": components["schemas"]["Runs.Application.Dtos.RunDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/SemanticKernelIntegration/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/SemanticKernelIntegration/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Integration.SemanticKernel.Controllers.ConnectSemanticKernelDto"];
                    "text/json": components["schemas"]["ShipMvp.Integration.SemanticKernel.Controllers.ConnectSemanticKernelDto"];
                    "application/*+json": components["schemas"]["ShipMvp.Integration.SemanticKernel.Controllers.ConnectSemanticKernelDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/SemanticKernelIntegration/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Subscription/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available subscription plans */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Core.ApiResponse`1[[System.Collections.Generic.List`1[[ShipMvp.Application.Subscriptions.SubscriptionPlanDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
                        "application/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[System.Collections.Generic.List`1[[ShipMvp.Application.Subscriptions.SubscriptionPlanDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
                        "text/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[System.Collections.Generic.List`1[[ShipMvp.Application.Subscriptions.SubscriptionPlanDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Subscription/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user's subscription details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.UserSubscriptionDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "application/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.UserSubscriptionDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "text/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.UserSubscriptionDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Subscription/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user's subscription usage */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.SubscriptionUsageDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "application/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.SubscriptionUsageDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "text/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.SubscriptionUsageDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Subscription/checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Stripe checkout session for subscription upgrade */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Api.Controllers.CreateCheckoutSessionRequest"];
                    "text/json": components["schemas"]["ShipMvp.Api.Controllers.CreateCheckoutSessionRequest"];
                    "application/*+json": components["schemas"]["ShipMvp.Api.Controllers.CreateCheckoutSessionRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.CreateCheckoutSessionResponse, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "application/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.CreateCheckoutSessionResponse, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "text/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.CreateCheckoutSessionResponse, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Subscription/portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Stripe portal session for subscription management */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Api.Controllers.CreatePortalSessionRequest"];
                    "text/json": components["schemas"]["ShipMvp.Api.Controllers.CreatePortalSessionRequest"];
                    "application/*+json": components["schemas"]["ShipMvp.Api.Controllers.CreatePortalSessionRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.CreatePortalSessionResponse, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "application/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.CreatePortalSessionResponse, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "text/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.CreatePortalSessionResponse, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Subscription/usage/track": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Track usage for a feature (e.g., invoice creation) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Api.Controllers.TrackUsageRequest"];
                    "text/json": components["schemas"]["ShipMvp.Api.Controllers.TrackUsageRequest"];
                    "application/*+json": components["schemas"]["ShipMvp.Api.Controllers.TrackUsageRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Core.ApiResponse`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
                        "application/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
                        "text/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Subscription/can-use/{feature}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if user can use a specific feature */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    feature: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Api.Controllers.CanUseFeatureResponse, ShipMvp.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "application/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Api.Controllers.CanUseFeatureResponse, ShipMvp.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                        "text/json": components["schemas"]["ShipMvp.Core.ApiResponse`1[[ShipMvp.Api.Controllers.CanUseFeatureResponse, ShipMvp.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    PageSize?: number;
                    Status?: string;
                    Search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Suites.Application.Dtos.SuiteDto"][];
                        "application/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"][];
                        "text/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Suites.Application.Dtos.CreateSuiteRequest"];
                    "text/json": components["schemas"]["Suites.Application.Dtos.CreateSuiteRequest"];
                    "application/*+json": components["schemas"]["Suites.Application.Dtos.CreateSuiteRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "application/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "text/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suites/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Page?: number;
                    PageSize?: number;
                    Status?: string;
                    Search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": number;
                        "application/json": number;
                        "text/json": number;
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suites/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "application/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "text/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found - Resource does not exist */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["Suites.Application.Dtos.UpdateSuiteRequest"];
                    "text/json": components["schemas"]["Suites.Application.Dtos.UpdateSuiteRequest"];
                    "application/*+json": components["schemas"]["Suites.Application.Dtos.UpdateSuiteRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "application/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "text/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suites/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "application/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "text/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suites/{id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "application/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                        "text/json": components["schemas"]["Suites.Application.Dtos.SuiteDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connect/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users
         * @description Retrieve a list of users with optional filtering and pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Search text for username, name, surname, or email */
                    searchText?: string;
                    /** @description Filter by role */
                    role?: string;
                    /** @description Filter by active status */
                    isActive?: boolean;
                    /** @description Number of items per page (default: 10) */
                    pageSize?: number;
                    /** @description Page number (default: 1) */
                    pageNumber?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Users retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Application.Identity.UserDto"][];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create user
         * @description Create a new user in the system
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User creation data */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Application.Identity.CreateUserDto"];
                    "text/json": components["schemas"]["ShipMvp.Application.Identity.CreateUserDto"];
                    "application/*+json": components["schemas"]["ShipMvp.Application.Identity.CreateUserDto"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Application.Identity.UserDto"];
                    };
                };
                /** @description Invalid user data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Username or email already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Retrieve a specific user by their ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Application.Identity.UserDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update user
         * @description Update an existing user's information
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description User update data */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Application.Identity.UpdateUserDto"];
                    "text/json": components["schemas"]["ShipMvp.Application.Identity.UpdateUserDto"];
                    "application/*+json": components["schemas"]["ShipMvp.Application.Identity.UpdateUserDto"];
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Application.Identity.UserDto"];
                    };
                };
                /** @description Invalid user data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete user
         * @description Delete a user from the system
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add role to user
         * @description Assign a role to a user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Role assignment request */
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ShipMvp.Api.Controllers.RoleRequest"];
                    "text/json": components["schemas"]["ShipMvp.Api.Controllers.RoleRequest"];
                    "application/*+json": components["schemas"]["ShipMvp.Api.Controllers.RoleRequest"];
                };
            };
            responses: {
                /** @description Role added successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Application.Identity.UserDto"];
                    };
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Users/{id}/roles/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove role from user
         * @description Remove a role from a user
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                    /** @description Role name to remove */
                    role: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Role removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ShipMvp.Application.Identity.UserDto"];
                    };
                };
                /** @description Unauthorized - Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden - Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/webhooks/stripe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Handle Stripe webhook events */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request - Invalid input data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "AuthProfiles.Application.Requests.CreateAuthProfileRequest": {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            projectId?: string;
            /** Format: uuid */
            serviceId?: string;
            environmentKey?: string | null;
            type?: components["schemas"]["AuthProfiles.Domain.AuthType"];
            tokenUrl?: string | null;
            audience?: string | null;
            scopesCsv?: string | null;
            injectionMode?: components["schemas"]["AuthProfiles.Domain.InjectionMode"];
            injectionName?: string | null;
            injectionFormat?: string | null;
            secretRefs?: {
                [key: string]: string;
            } | null;
        };
        "AuthProfiles.Application.Requests.UpdateAuthProfileRequest": {
            tokenUrl?: string | null;
            audience?: string | null;
            scopesCsv?: string | null;
            injectionMode?: components["schemas"]["AuthProfiles.Domain.InjectionMode"];
            injectionName?: string | null;
            injectionFormat?: string | null;
            secretRefs?: {
                [key: string]: string;
            } | null;
        };
        "AuthProfiles.Controllers.AuthProfilesController.DetectRequest": {
            /** Format: uuid */
            projectId?: string;
            /** Format: uuid */
            serviceId?: string;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        "AuthProfiles.Domain.AuthType": 0 | 1 | 2 | 3;
        /**
         * Format: int32
         * @enum {integer}
         */
        "AuthProfiles.Domain.InjectionMode": 0 | 1 | 2;
        "Chapi.AI.Controllers.RunPackController.UpdateFileRequest": {
            filePath?: string | null;
            content?: string | null;
        };
        "Chapi.AI.Dto.ApiTestGenerateRequest": {
            user_query?: string | null;
            /** Format: uuid */
            projectId?: string;
            /** Format: int32 */
            max_files?: number | null;
            openApiJson?: string | null;
        };
        "Chapi.AI.Dto.ChapiCard": {
            role?: string | null;
            heading?: string | null;
            plan?: string[] | null;
            files?: components["schemas"]["Chapi.AI.Dto.FileEntry"][] | null;
            actions?: string[] | null;
        };
        "Chapi.AI.Dto.FileEntry": {
            path?: string | null;
            /** Format: int32 */
            addedLines?: number;
        };
        "Chapi.AI.Services.GenerateRunPackRequest": {
            /** Format: uuid */
            projectId?: string;
            card?: components["schemas"]["Chapi.AI.Dto.ChapiCard"];
            userQuery?: string | null;
            environment?: string | null;
            /** Format: uuid */
            conversationId?: string;
            /** Format: uuid */
            messageId?: string;
        };
        "Chapi.ApiSpecs.Application.ApiSpecDto": {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            projectId?: string;
            sourceUrl?: string | null;
            version?: string | null;
            /** Format: date-time */
            createdAt?: string;
        };
        "Chapi.ApiSpecs.Application.ImportOpenApiInputDto": {
            /** Format: uuid */
            projectId?: string;
            url?: string | null;
        };
        "Chapi.EndpointCatalog.Application.EndpointBriefDto": {
            /** Format: uuid */
            id?: string;
            method?: string | null;
            path?: string | null;
            summary?: string | null;
            tags?: string[] | null;
        };
        "Chapi.EndpointCatalog.Application.EndpointDto": {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            specId?: string;
            method?: string | null;
            path?: string | null;
            operationId?: string | null;
            summary?: string | null;
            description?: string | null;
            tags?: string[] | null;
            servers?: unknown;
            security?: unknown;
            parameters?: unknown;
            request?: unknown;
            responses?: unknown;
        };
        "Chat.Application.Dtos.ConversationDto": {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            /** Format: uuid */
            projectId?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            messages?: components["schemas"]["Chat.Application.Dtos.MessageDto"][] | null;
        };
        "Chat.Application.Dtos.MessageDto": {
            /** Format: uuid */
            id?: string;
            role?: string | null;
            content?: string | null;
            cardType?: string | null;
            cardPayload?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: uuid */
            runPackId?: string | null;
        };
        "Chat.Application.Requests.AppendMessageRequest": {
            /** Format: uuid */
            conversationId?: string;
            role?: string | null;
            content?: string | null;
            cardType?: string | null;
            cardPayload?: string | null;
        };
        "Chat.Application.Requests.AppendMessagesRequest": {
            /** Format: uuid */
            conversationId?: string;
            messages?: components["schemas"]["Chat.Application.Requests.AppendMessageRequest"][] | null;
        };
        "Chat.Application.Requests.CreateConversationRequest": {
            /** Format: uuid */
            projectId?: string;
            title?: string | null;
            firstUserMessage?: string | null;
            additionalMessages?: components["schemas"]["Chat.Application.Requests.AppendMessageRequest"][] | null;
        };
        "Chat.Application.Requests.SaveDiffAsSuiteRequest": {
            /** Format: uuid */
            conversationId?: string;
            diffPayload?: string | null;
            /** Format: uuid */
            projectId?: string;
        };
        "Contacts.Application.Requests.CreateContactRequest": {
            name?: string | null;
            email?: string | null;
            company?: string | null;
        };
        "Contacts.Application.Requests.UpdateContactRequest": {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            email?: string | null;
            company?: string | null;
            /** Format: byte */
            rowVersion?: string | null;
        };
        "Environments.Application.Dtos.CreateEnvironmentRequest": {
            name?: string | null;
            /** Format: uuid */
            projectId?: string;
            baseUrl?: string | null;
            /** Format: int32 */
            timeoutMs?: number;
            followRedirects?: boolean;
            headers?: components["schemas"]["Environments.Application.Dtos.EnvironmentHeaderDto"][] | null;
        };
        "Environments.Application.Dtos.EnvironmentDto": {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            /** Format: uuid */
            projectId?: string;
            baseUrl?: string | null;
            /** Format: int32 */
            timeoutMs?: number;
            followRedirects?: boolean;
            /** Format: date-time */
            createdAt?: string;
            headers?: components["schemas"]["Environments.Application.Dtos.EnvironmentHeaderDto"][] | null;
            secrets?: components["schemas"]["Environments.Application.Dtos.SecretRefDto"][] | null;
        };
        "Environments.Application.Dtos.EnvironmentHeaderDto": {
            key?: string | null;
            value?: string | null;
        };
        "Environments.Application.Dtos.RotateSecretRequest": {
            provider?: string | null;
            keyPath?: string | null;
        };
        "Environments.Application.Dtos.SecretRefDto": {
            provider?: string | null;
            keyPath?: string | null;
            /** Format: date-time */
            lastRotatedAt?: string | null;
            maskedPreview?: string | null;
        };
        "Environments.Application.Dtos.SetSecretRequest": {
            provider?: string | null;
            keyPath?: string | null;
            value?: string | null;
        };
        "Environments.Application.Dtos.UpdateEnvironmentRequest": {
            baseUrl?: string | null;
            /** Format: int32 */
            timeoutMs?: number;
            followRedirects?: boolean;
            headers?: components["schemas"]["Environments.Application.Dtos.EnvironmentHeaderDto"][] | null;
        };
        "Projects.Application.Dtos.CreateProjectRequest": {
            name?: string | null;
            description?: string | null;
            tasks?: components["schemas"]["Projects.Application.Dtos.CreateProjectTaskRequest"][] | null;
        };
        "Projects.Application.Dtos.CreateProjectTaskRequest": {
            title?: string | null;
            description?: string | null;
        };
        "Projects.Application.Dtos.ProjectDto": {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            description?: string | null;
            status?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            startDate?: string | null;
            /** Format: date-time */
            endDate?: string | null;
            tasks?: components["schemas"]["Projects.Application.Dtos.ProjectTaskDto"][] | null;
        };
        "Projects.Application.Dtos.ProjectTaskDto": {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            description?: string | null;
            isDone?: boolean;
        };
        "Projects.Application.Dtos.UpdateProjectRequest": {
            name?: string | null;
            description?: string | null;
            tasks?: components["schemas"]["Projects.Application.Dtos.CreateProjectTaskRequest"][] | null;
        };
        "RunPack.Application.Requests.BuildRunPackFromConversationRequest": {
            /** Format: uuid */
            projectId?: string;
            /** Format: uuid */
            conversationId?: string;
            /** Format: uuid */
            messageId?: string;
            mode?: string | null;
        };
        "RunPack.Application.Requests.BuildRunPackRequest": {
            /** Format: uuid */
            projectId?: string;
            mode?: string | null;
        };
        "Runs.Application.Dtos.AddRunStepRequest": {
            name?: string | null;
            log?: string | null;
        };
        "Runs.Application.Dtos.QueueRunRequest": {
            /** Format: uuid */
            suiteId?: string;
        };
        "Runs.Application.Dtos.RunDto": {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            suiteId?: string;
            status?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            startedAt?: string | null;
            /** Format: date-time */
            finishedAt?: string | null;
            steps?: components["schemas"]["Runs.Application.Dtos.RunStepDto"][] | null;
        };
        "Runs.Application.Dtos.RunStepDto": {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            log?: string | null;
        };
        /** @description DTO for user registration */
        "ShipMvp.Api.Controllers.AuthController.RegisterDto": {
            /** @description Username for the new account */
            username: string;
            /** @description User's first name */
            name: string;
            /** @description User's last name */
            surname: string;
            /**
             * Format: email
             * @description Email address
             */
            email: string;
            /** @description Password for the new account */
            password: string;
            /**
             * Format: tel
             * @description Phone number (optional)
             */
            phoneNumber?: string | null;
        };
        /** @description DTO for user registration result */
        "ShipMvp.Api.Controllers.AuthController.RegisterResultDto": {
            /** @description Indicates if the registration was successful */
            success?: boolean;
            /** @description User ID of the registered user */
            userId?: string | null;
            /** @description Username of the registered user */
            username?: string | null;
            /** @description Email of the registered user */
            email?: string | null;
            /** @description Confirmation message or error message */
            message?: string | null;
            /** @description Indicates if the confirmation email was sent successfully */
            emailSent?: boolean;
            /** @description Error message if registration failed */
            errorMessage?: string | null;
        };
        /** @description DTO for user status information */
        "ShipMvp.Api.Controllers.AuthController.UserStatusDto": {
            /** @description User ID */
            userId?: string | null;
            /** @description Username */
            username?: string | null;
            /** @description Email address */
            email?: string | null;
            /** @description Indicates if the user account is active */
            isActive?: boolean;
            /** @description Indicates if the email is confirmed */
            emailConfirmed?: boolean;
        };
        "ShipMvp.Api.Controllers.CanUseFeatureResponse": {
            canUse?: boolean;
        };
        "ShipMvp.Api.Controllers.CreateCheckoutSessionRequest": {
            planId?: string | null;
            successUrl?: string | null;
            cancelUrl?: string | null;
        };
        "ShipMvp.Api.Controllers.CreatePortalSessionRequest": {
            returnUrl?: string | null;
        };
        /** @description Email service health status */
        "ShipMvp.Api.Controllers.EmailServiceHealth": {
            /** @description Whether the email service is healthy */
            isHealthy?: boolean;
            /** @description Name of the email service provider */
            serviceName: string | null;
            /**
             * Format: date-time
             * @description Last health check timestamp
             */
            lastChecked?: string;
            /**
             * Format: int32
             * @description Remaining rate limit quota (if available)
             */
            rateLimitRemaining?: number | null;
            /** @description Additional health details */
            details?: string | null;
        };
        /** @description Request to resend confirmation email */
        "ShipMvp.Api.Controllers.ResendConfirmationRequest": {
            /**
             * Format: uuid
             * @description User ID
             */
            userId: string;
            /** @description User email address */
            email: string | null;
            /** @description User name */
            userName: string | null;
            /** @description Email confirmation token */
            confirmationToken: string | null;
        };
        /** @description Request model for role operations */
        "ShipMvp.Api.Controllers.RoleRequest": {
            /** @description The role name to assign or remove */
            role?: string | null;
        };
        /** @description Request to send password reset email */
        "ShipMvp.Api.Controllers.SendPasswordResetRequest": {
            /**
             * Format: uuid
             * @description User ID
             */
            userId: string;
            /** @description User email address */
            email: string | null;
            /** @description User name */
            userName: string | null;
            /** @description Password reset token */
            resetToken: string | null;
        };
        /** @description Request to send welcome email */
        "ShipMvp.Api.Controllers.SendWelcomeEmailRequest": {
            /**
             * Format: uuid
             * @description User ID
             */
            userId: string;
            /** @description User email address */
            email: string | null;
            /** @description User name */
            userName: string | null;
        };
        "ShipMvp.Api.Controllers.TrackUsageRequest": {
            feature?: string | null;
            /** Format: int32 */
            amount?: number;
        };
        "ShipMvp.Application.Files.FileDto": {
            /** Format: uuid */
            id?: string;
            containerName?: string | null;
            fileName?: string | null;
            originalFileName?: string | null;
            mimeType?: string | null;
            /** Format: int64 */
            size?: number;
            hash?: string | null;
            storagePath?: string | null;
            /** Format: uuid */
            userId?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string | null;
            publicUrl?: string | null;
            isPublic?: boolean;
            tags?: string | null;
        };
        "ShipMvp.Application.Files.FileListDto": {
            files?: components["schemas"]["ShipMvp.Application.Files.FileDto"][] | null;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            currentPage?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            readonly totalPages?: number;
        };
        "ShipMvp.Application.Files.FileUploadResultDto": {
            /** Format: uuid */
            fileId?: string;
            fileName?: string | null;
            publicUrl?: string | null;
            /** Format: int64 */
            size?: number;
            success?: boolean;
            errorMessage?: string | null;
        };
        "ShipMvp.Application.Identity.CreateUserDto": {
            username: string;
            name: string;
            surname: string;
            /** Format: email */
            email: string;
            password: string;
            /** Format: tel */
            phoneNumber?: string | null;
            isActive?: boolean;
        };
        "ShipMvp.Application.Identity.UpdateUserDto": {
            name: string;
            surname: string;
            /** Format: tel */
            phoneNumber?: string | null;
            isActive?: boolean;
            isEmailConfirmed?: boolean;
            isPhoneNumberConfirmed?: boolean;
        };
        "ShipMvp.Application.Identity.UserDto": {
            /** Format: uuid */
            id?: string;
            username?: string | null;
            name?: string | null;
            surname?: string | null;
            email?: string | null;
            phoneNumber?: string | null;
            isActive?: boolean;
            isEmailConfirmed?: boolean;
            isPhoneNumberConfirmed?: boolean;
            isLockoutEnabled?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            lastLoginAt?: string | null;
            roles?: string[] | null;
        };
        "ShipMvp.Application.Integrations.CreateIntegrationDto": {
            name?: string | null;
            integrationType?: components["schemas"]["ShipMvp.Domain.Integrations.IntegrationType"];
            authMethod?: components["schemas"]["ShipMvp.Domain.Integrations.AuthMethodType"];
            clientId?: string | null;
            clientSecret?: string | null;
            tokenEndpoint?: string | null;
        };
        "ShipMvp.Application.Integrations.IntegrationDto": {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            integrationType?: components["schemas"]["ShipMvp.Domain.Integrations.IntegrationType"];
            authMethod?: components["schemas"]["ShipMvp.Domain.Integrations.AuthMethodType"];
            clientId?: string | null;
            tokenEndpoint?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string | null;
        };
        "ShipMvp.Application.Integrations.UpdateIntegrationDto": {
            name?: string | null;
            clientId?: string | null;
            clientSecret?: string | null;
            tokenEndpoint?: string | null;
        };
        "ShipMvp.Application.Subscriptions.CreateCheckoutSessionResponse": {
            sessionId?: string | null;
            url?: string | null;
        };
        "ShipMvp.Application.Subscriptions.CreatePortalSessionResponse": {
            url?: string | null;
        };
        "ShipMvp.Application.Subscriptions.PlanFeaturesDto": {
            /** Format: int32 */
            maxInvoices?: number;
            /** Format: int32 */
            maxUsers?: number;
            supportLevel?: string | null;
            customBranding?: boolean;
            apiAccess?: boolean;
        };
        "ShipMvp.Application.Subscriptions.SubscriptionPlanDto": {
            id?: string | null;
            name?: string | null;
            description?: string | null;
            /** Format: double */
            price?: number;
            currency?: string | null;
            interval?: string | null;
            features?: components["schemas"]["ShipMvp.Application.Subscriptions.PlanFeaturesDto"];
            isActive?: boolean;
        };
        "ShipMvp.Application.Subscriptions.SubscriptionUsageDto": {
            /** Format: uuid */
            userId?: string;
            /** Format: int32 */
            invoiceCount?: number;
            /** Format: int32 */
            userCount?: number;
            /** Format: date-time */
            lastUpdated?: string;
        };
        "ShipMvp.Application.Subscriptions.UserSubscriptionDto": {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            userId?: string;
            planId?: string | null;
            status?: string | null;
            stripeSubscriptionId?: string | null;
            stripeCustomerId?: string | null;
            /** Format: date-time */
            currentPeriodStart?: string;
            /** Format: date-time */
            currentPeriodEnd?: string;
            /** Format: date-time */
            cancelledAt?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string | null;
        };
        "ShipMvp.Core.ApiResponse`1[[ShipMvp.Api.Controllers.CanUseFeatureResponse, ShipMvp.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
            isSuccess?: boolean;
            data?: components["schemas"]["ShipMvp.Api.Controllers.CanUseFeatureResponse"];
            error?: string | null;
            message?: string | null;
        };
        "ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.CreateCheckoutSessionResponse, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
            isSuccess?: boolean;
            data?: components["schemas"]["ShipMvp.Application.Subscriptions.CreateCheckoutSessionResponse"];
            error?: string | null;
            message?: string | null;
        };
        "ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.CreatePortalSessionResponse, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
            isSuccess?: boolean;
            data?: components["schemas"]["ShipMvp.Application.Subscriptions.CreatePortalSessionResponse"];
            error?: string | null;
            message?: string | null;
        };
        "ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.SubscriptionUsageDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
            isSuccess?: boolean;
            data?: components["schemas"]["ShipMvp.Application.Subscriptions.SubscriptionUsageDto"];
            error?: string | null;
            message?: string | null;
        };
        "ShipMvp.Core.ApiResponse`1[[ShipMvp.Application.Subscriptions.UserSubscriptionDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]": {
            isSuccess?: boolean;
            data?: components["schemas"]["ShipMvp.Application.Subscriptions.UserSubscriptionDto"];
            error?: string | null;
            message?: string | null;
        };
        "ShipMvp.Core.ApiResponse`1[[System.Collections.Generic.List`1[[ShipMvp.Application.Subscriptions.SubscriptionPlanDto, ShipMvp.Application, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
            isSuccess?: boolean;
            data?: components["schemas"]["ShipMvp.Application.Subscriptions.SubscriptionPlanDto"][] | null;
            error?: string | null;
            message?: string | null;
        };
        "ShipMvp.Core.ApiResponse`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]": {
            isSuccess?: boolean;
            data?: unknown;
            error?: string | null;
            message?: string | null;
        };
        "ShipMvp.Domain.Analytics.Models.DashboardData": {
            summary: components["schemas"]["ShipMvp.Domain.Analytics.Models.DashboardSummary"];
            topSources?: components["schemas"]["ShipMvp.Domain.Analytics.Models.TrafficSource"][] | null;
            timeSeriesData?: components["schemas"]["ShipMvp.Domain.Analytics.Models.TimeSeriesDataPoint"][] | null;
            dateRange?: components["schemas"]["ShipMvp.Domain.Analytics.Models.DateTimeRange"];
        };
        "ShipMvp.Domain.Analytics.Models.DashboardSummary": {
            /** Format: int64 */
            totalPageViews?: number;
            /** Format: double */
            pageViewsChange?: number;
            /** Format: double */
            totalRevenue?: number;
            /** Format: double */
            revenueChange?: number;
            /** Format: int64 */
            totalPayingUsers?: number;
            /** Format: double */
            payingUsersChange?: number;
            /** Format: int64 */
            totalSignups?: number;
            /** Format: double */
            signupsChange?: number;
        };
        "ShipMvp.Domain.Analytics.Models.DateTimeRange": {
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
        };
        "ShipMvp.Domain.Analytics.Models.TimeSeriesDataPoint": {
            /** Format: date-time */
            date?: string;
            /** Format: double */
            revenue?: number;
            /** Format: double */
            profit?: number;
            /** Format: int64 */
            pageViews?: number;
            /** Format: int64 */
            signups?: number;
        };
        "ShipMvp.Domain.Analytics.Models.TrafficSource": {
            source: string | null;
            /** Format: int64 */
            visitors?: number;
            /** Format: double */
            sales?: number;
            /** Format: double */
            conversionRate?: number;
        };
        "ShipMvp.Domain.Email.Models.EmailResult": {
            isSuccess?: boolean;
            messageId?: string | null;
            errorMessage?: string | null;
            additionalData?: {
                [key: string]: unknown;
            } | null;
            /** Format: date-time */
            sentAt?: string;
        };
        /**
         * Format: int32
         * @enum {integer}
         */
        "ShipMvp.Domain.Integrations.AuthMethodType": 1 | 2 | 3 | 4 | 5;
        /**
         * Format: int32
         * @enum {integer}
         */
        "ShipMvp.Domain.Integrations.IntegrationType": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 99;
        "ShipMvp.Integration.SemanticKernel.Controllers.ConnectSemanticKernelDto": {
            deployment?: string | null;
            apiKey?: string | null;
            endpoint?: string | null;
            modelName?: string | null;
            organization?: string | null;
        };
        "Suites.Application.Dtos.CreateSuiteFileRequest": {
            path?: string | null;
            kind?: string | null;
        };
        "Suites.Application.Dtos.CreateSuiteRequest": {
            name?: string | null;
            description?: string | null;
            files?: components["schemas"]["Suites.Application.Dtos.CreateSuiteFileRequest"][] | null;
            testCases?: components["schemas"]["Suites.Application.Dtos.CreateTestCaseRequest"][] | null;
        };
        "Suites.Application.Dtos.CreateTestCaseRequest": {
            name?: string | null;
            command?: string | null;
        };
        "Suites.Application.Dtos.SuiteDto": {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            description?: string | null;
            status?: string | null;
            /** Format: date-time */
            createdAt?: string;
            files?: components["schemas"]["Suites.Application.Dtos.SuiteFileDto"][] | null;
            testCases?: components["schemas"]["Suites.Application.Dtos.TestCaseDto"][] | null;
        };
        "Suites.Application.Dtos.SuiteFileDto": {
            /** Format: uuid */
            id?: string;
            path?: string | null;
            kind?: string | null;
        };
        "Suites.Application.Dtos.TestCaseDto": {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            command?: string | null;
        };
        "Suites.Application.Dtos.UpdateSuiteRequest": {
            name?: string | null;
            description?: string | null;
            files?: components["schemas"]["Suites.Application.Dtos.CreateSuiteFileRequest"][] | null;
            testCases?: components["schemas"]["Suites.Application.Dtos.CreateTestCaseRequest"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
